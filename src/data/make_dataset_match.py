import pandas as pd
import numpy as np
import datetime

def generate_match_data(club_members_df, num_matches=10, zones=['A', 'B', 'C', 'D']):
    """
    Generates the main match dataset with contextual features and the target variable.

    This function creates a dataset where each row represents a specific match and zone,
    enriched with synthetic features driven by a latent "excitement factor".
    The target variable, 'final_released_seats', is calculated directly from the
    provided club_members_df to ensure consistency.

    Args:
        club_members_df (pd.DataFrame): The DataFrame generated by make_dataset_members.py.
        num_matches (int): The number of unique matches. Must match the members script.
        zones (list): A list of seating zone identifiers.

    Returns:
        pd.DataFrame: A DataFrame containing the synthetic match data.
    """
    print("Starting match dataset generation...")
    all_matches = []
    
    # Set the same fixed match day as the members script for reproducibility
    match_day_zero = datetime.datetime(2025, 10, 26)

    for match_id in range(1, num_matches + 1):
        # 1. Generate the "Match Excitement Factor"
        # This latent variable will drive the other features.
        excitement_factor = np.random.uniform(0.1, 1.0)
        
        # 2. Generate contextual features based on the excitement factor
        match_date = match_day_zero + datetime.timedelta(days=match_id * 14)

        # --- Match Category ---
        if excitement_factor > 0.75:
            competition = 'CHAMPIONS_LEAGUE'
            kick_off_time = '21:00'
        elif excitement_factor > 0.4:
            competition = 'LIGA'
            kick_off_time = '18:30'
        else:
            competition = 'COPA_DEL_REY'
            kick_off_time = '20:00'
        
        weekday = match_date.strftime('%A')
        month = match_date.month
        is_weekend = weekday in ['Saturday', 'Sunday']

        # --- Opponent Category ---
        if excitement_factor > 0.8:
            opponent_position = np.random.randint(1, 4) # Top tier
            is_derby = True
        elif excitement_factor > 0.5:
            opponent_position = np.random.randint(4, 10) # Mid tier
            is_derby = False
        else:
            opponent_position = np.random.randint(10, 21) # Lower tier
            is_derby = False

        # --- Team Momentum Category ---
        team_position = np.random.randint(1, 5) # Home team is generally strong
        # Calculate probability of losing the last match (inversely related to excitement)
        p_win = 0.1 + 0.7 * excitement_factor
        p_draw = 0.15
        p_loss = 1.0 - p_win - p_draw
        last_match_lost = np.random.choice([True, False], p=[p_loss, 1 - p_loss])
        goal_difference_last_5 = int(np.random.normal(10 * excitement_factor, 2))
        top_player_injured = np.random.choice([True, False], p=[1 - excitement_factor, excitement_factor])

        # --- Members & Zones Category ---
        incentives_to_release = np.random.choice([True, False], p=[1 - excitement_factor, excitement_factor])
        
        # --- Weather Category ---
        # Higher excitement factor slightly correlates with better weather
        is_rain = np.random.choice([True, False], p=[0.5 - (excitement_factor * 0.4), 0.5 + (excitement_factor * 0.4)])
        is_storm = is_rain and np.random.rand() > 0.8 # Storm is a rare subset of rain
        is_wind = np.random.rand() > 0.7

        # --- External Factors Category ---
        is_holiday = np.random.choice([True, False], p=[0.1, 0.9])
        day_before_holiday = np.random.choice([True, False], p=[0.1, 0.9])
        new_player_debuting = np.random.choice([True, False], p=[0.2 * excitement_factor, 1 - (0.2 * excitement_factor)])
        popular_concert_in_city = np.random.choice([True, False], p=[0.15, 0.85])

        for zone_id in zones:
            all_matches.append({
                'match_id': match_id,
                'zone_id': zone_id,
                'match_date': match_date.strftime('%Y-%m-%d'),
                # Match
                'weekday': weekday,
                'month': month,
                'is_weekend': is_weekend,
                'kick_off_time': kick_off_time,
                'competition': competition,
                # Opponent
                'opponent_position': opponent_position,
                'is_derby': is_derby,
                # Team Momentum
                'team_position': team_position,
                'last_match_lost': last_match_lost,
                'goal_difference_last_5': goal_difference_last_5,
                'top_player_injured': top_player_injured,
                # Members & Zones
                'incentives_to_release': incentives_to_release,
                # Weather
                'is_rain': is_rain,
                'is_storm': is_storm,
                'is_wind': is_wind,
                # External Factors
                'is_holiday': is_holiday,
                'day_before_holiday': day_before_holiday,
                'new_player_debuting': new_player_debuting,
                'popular_concert_in_city': popular_concert_in_city
            })
            
    match_features_df = pd.DataFrame(all_matches)
    print("  Generated contextual match features.")

    # 3. Calculate the ground truth target variable from the members data
    print("  Calculating target variable from club_members_app.csv...")
    target_df = club_members_df.groupby(['match_id', 'zone_id'])['released'].sum().reset_index()
    target_df = target_df.rename(columns={'released': 'final_released_seats'})

    # 4. Merge features with the target variable
    final_df = pd.merge(match_features_df, target_df, on=['match_id', 'zone_id'])
    print("  Merged features with target variable.")
    
    return final_df

if __name__ == '__main__':
    # --- Configuration ---
    MEMBERS_DATA_FILENAME = 'club_members_app.csv'
    OUTPUT_FILENAME = 'match_data.csv'

    # --- Execution ---
    try:
        # Load the previously generated members data
        club_members_data = pd.read_csv(MEMBERS_DATA_FILENAME)
        
        # Generate the main match dataset
        match_data = generate_match_data(club_members_data)

        # --- Save to CSV ---
        match_data.to_csv(OUTPUT_FILENAME, index=False)
        print(f"\nSuccessfully generated synthetic match data.")
        print(f"Total rows: {len(match_data)}")
        print(f"Saved to '{OUTPUT_FILENAME}'")
        print("\n--- Sample of the data ---")
        pd.set_option('display.max_columns', None)
        print(match_data.head())
        print("\n--- Data summary ---")
        print(match_data.info())

    except FileNotFoundError:
        print(f"ERROR: The file '{MEMBERS_DATA_FILENAME}' was not found.")
        print("Please run the 'make_dataset_members.py' script first to generate it.")
